!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}n.r(e);var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,i;return e=t,i=[{key:"norm",value:function(t,e,n){return(t-e)/(n-e)}},{key:"lerp",value:function(t,e,n){return(n-e)*t+e}},{key:"map",value:function(e,n,r,i,a){return t.lerp(t.norm(e,n,r),i,a)}},{key:"clamp",value:function(t,e,n){return Math.min(Math.max(t,Math.min(e,n)),Math.max(e,n))}},{key:"distance",value:function(t,e){var n=e.x-t.x,r=e.y-t.y;return Math.sqrt(n*n+r*r)}},{key:"distanceXY",value:function(t,e,n,r){var i=n-t,a=r-e;return Math.sqrt(i*i+a*a)}},{key:"circleCollision",value:function(e,n){return t.distance(e,n)<=e.radius+n.radius}},{key:"circlePointCollision",value:function(e,n,r){return t.distanceXY(e,n,r.x,r.y)<r.radius}},{key:"pointInRect",value:function(e,n,r){return t.inRange(e,r.x,r.x+r.width)&&t.inRange(n,r.y,r.y+r.height)}},{key:"inRange",value:function(t,e,n){return t>=Math.min(e,n)&&t<=Math.max(e,n)}},{key:"rangeIntersect",value:function(t,e,n,r){return Math.max(t,e)>=Math.min(n,r)&&Math.min(t,e)<=Math.max(n,r)}},{key:"rectIntersect",value:function(e,n){return t.rangeIntersect(e.x,e.x+e.width,n.x,n.x+n.width)&&t.rangeIntersect(e.y,e.y+e.height,n.y,n.y+n.height)}},{key:"degreesToRads",value:function(t){return t/180*Math.PI}},{key:"radsToDegrees",value:function(t){return 180*t/Math.PI}},{key:"randomRange",value:function(t,e){return t+Math.random()*(e-t)}},{key:"randomInt",value:function(t,e){return Math.floor(t+Math.random()*(e-t+1))}},{key:"randomDist",value:function(e,n,r){for(var i=0,a=0;a<r;a+=1)i+=t.randomRange(e,n);return i/r}},{key:"randomColor",value:function(t){return t[Math.floor(Math.random()*t.length)]}}],(n=null)&&r(e.prototype,n),i&&r(e,i),t}();function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var o={},u=["#468966","#FFF0A5","#FFB03B","#B64926","#8E2800"];window.addEventListener("mousemove",(function(t){o.x=t.clientX,o.y=t.clientY}));var c=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvas=document.querySelector("#canvas"),this.ctx=canvas.getContext("2d"),this.color=i.randomColor(u),this.x=Math.random()*this.canvas.width,this.y=Math.random()*this.canvas.height,this.x2=e,this.y2=n,this.vx=0,this.vy=0,this.radius=2.5*Math.random()+2,this.friction=.05*Math.random()+.94,this.speed=20}var e,n,r;return e=t,(n=[{key:"update",value:function(){this.vx=(this.x2-this.x)/this.speed,this.vy=(this.y2-this.y)/this.speed,this.x+=this.vx,this.y+=this.vy}},{key:"draw",value:function(){this.ctx.save(),this.ctx.beginPath(),this.ctx.arc(this.x,this.y,this.radius,0,2*Math.PI,!1),this.ctx.fillStyle=this.color,this.ctx.fill(),this.ctx.restore()}}])&&a(e.prototype,n),r&&a(e,r),t}();!function(){window.addEventListener("load",(function(){o(),u()})),window.onresize=function(){n.width=window.innerWidth,n.height=window.innerHeight,a=[],o()};var t=document.createElement("canvas"),e=t.getContext("2d"),n=document.querySelector("#canvas"),r=n.getContext("2d"),i=0,a=[];function o(){!function(){var t=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;window.requestAnimationFrame=t}();var r=window.innerWidth,o=window.innerHeight;t.width=r,t.height=o;var u=new Image;u.src="./images/img.png",u.addEventListener("load",(function(){e.drawImage(u,(r-u.width)/2,(o-u.height)/2);var t=e.getImageData(0,0,r,o).data;n.width=r,n.height=o;for(var s=0;s<r;s+=Math.round(r/140))for(var h=0;h<o;h+=Math.round(r/140))t[4*(s+h*r)+3]>140&&a.push(new c(s,h));i=a.length}))}function u(){r.clearRect(0,0,n.width,n.height);for(var t=0;t<i;t++){var e=a[t];e.update(),e.draw()}requestAnimationFrame(u)}}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,